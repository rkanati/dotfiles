# env:
  # If this property is not set, alacritty will set it to xterm-256color.
  # TERM: xterm-256color

window:
    # Window decorations
    decorations: full

scrolling:
    history: 10000
    multiplier: 3

# Font configuration (changes require restart)
font:
    normal:
        family: monospace
        style: Regular

    bold:
        family: monospace
        sytle: Bold

    italic:
        family: monospace
        style: Italic

    # Pt
    size: 13.5

    # Offset is the extra space around each character. offset.y can be thought of
    # as modifying the linespacing, and offset.x as modifying the letter spacing.
    offset:
        x: 0
        y: 0

    # Glyph offset determines the locations of the glyphs within their cells with
    # the default being at the bottom. Increase the x offset to move the glyph to
    # the right, increase the y offset to move the glyph upward.
    glyph_offset:
        x: 0
        y: 0

# Colors
draw_bold_text_with_bright_colors: false

colors:
    cursor:
        text:   '0x000000'
        cursor: '0xffffff'

    greys:
        c232: &bg '0x080c10'
        c233:     '0x13171a'
        c234:     '0x1d2125'
        c235: &bl '0x282c2f'
        c236:     '0x33363a'
        c237:     '0x3e4144'
        c238:     '0x484b4e'
        c239:     '0x535659'
        c240:     '0x5e6163'
        c241: &bb '0x696b6e'
        c242:     '0x737678'
        c243:     '0x7e8082'
        c244:     '0x898b8d'
        c245:     '0x949597'
        c246:     '0x9ea0a1'
        c247:     '0xa9aaac'
        c248: &wh '0xb4b5b6'
        c249:     '0xbfc0c1'
        c250:     '0xc9cacb'
        c251:     '0xd4d5d5'
        c252:     '0xdfdfe0'
        c253:     '0xeaeaea'
        c254:     '0xf4f4f5'
        c255: &bw '0xffffff'

    normal:
        black:    *bl
        red:      '0xbf3d3d'
        green:    '0x00c062'
        yellow:   '0xa77f05'
        blue:     '0x207b88'
        magenta:  '0xad1457'
        cyan:     '0x26a69a'
        white:    *wh

    bright:
        black:    *bb
        red:      '0xff5252'
        green:    '0x00e676'
        yellow:   '0xffc107'
        blue:     '0x00bcd4'
        magenta:  '0xff4081'
        cyan:     '0x1de9b6'
        white:    *bw

    # Default colors
    primary:
        background: *bg
        foreground: *wh

    # # Dim colors (Optional)
    # dim:

visual_bell:
    animation: EaseOutExpo
    duration: 0

background_opacity: 0.88

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`: Middle, Left, Right, [integer]
# Values for `action`: Paste, PasteSelection, Copy (TODO)
#mouse_bindings:
# - { mouse: Middle, action: PasteSelection }

mouse:
    # ms
    double_click: { threshold: 300 }
    triple_click: { threshold: 300 }

    hide_when_typing: true

cursor:
    style: Beam

selection:
    semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>"

dynamic_title: true

# Live config reload (changes require restart)
live_config_reload: true

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:

# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.

# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space

# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:

# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.

# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.

key_bindings:
    - { key: V,         mods: Control|Shift, action: Paste                  }
    - { key: C,         mods: Control|Shift, action: Copy                   }
    - { key: Insert,    mods: Shift,         action: PasteSelection         }
    - { key: Key0,      mods: Control,       action: ResetFontSize          }
    - { key: Equals,    mods: Control,       action: IncreaseFontSize       }
    - { key: Minus,     mods: Control,       action: DecreaseFontSize       }
    - { key: T,         mods: Control|Shift, action: SpawnNewInstance       }
    - { key: PageUp,    mods: Shift,         action: ScrollPageUp           }
    - { key: PageDown,  mods: Shift,         action: ScrollPageDown         }
    - { key: Up,        mods: Shift,         action: ScrollLineUp           }
    - { key: Down,      mods: Shift,         action: ScrollLineDown         }
    - { key: Back,      mods: Control,       chars: "" }

